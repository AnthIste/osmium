#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2013 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Osmium\CLI\FetchZKillboardJSON;

require __DIR__.'/../inc/root.php';

/* The zKillboard documentation doesn't say if the dates are in UTC,
 * but they probably are */
date_default_timezone_set('UTC');

$c = \Osmium\curl_init_branded();
curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($c, CURLOPT_HEADER, 1);
curl_setopt($c, CURLOPT_TIMEOUT, 60);
curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 60);

$groupsq = \Osmium\Db\query(
	'SELECT DISTINCT groupid FROM osmium.invships ORDER BY groupid ASC'
);

while(true) {
	$groupids = array();
	for($i = 0; $i < 10; ++$i) {
		$gid = \Osmium\Db\fetch_row($groupsq);
		if($gid === false) break;
		$groupids[] = (int)$gid[0];
	}

	if($groupids === array()) break;
	$groupids = implode(',', $groupids);

	$cutoff = \Osmium\Db\fetch_row(\Osmium\Db\query(
		"SELECT max(killtime) FROM recentkillsdna rkd
		JOIN osmium.invships ON invships.typeid = split_part(rkd.dna, ':', 1)::integer
		WHERE invships.groupid IN ({$groupids})"
	));

	if($cutoff !== false) {
		$cutoff = time() - $cutoff[0];
	} else {
		$cutoff = 86400 * 7;
	}

	$cutoff = max(7200, min(86400 * 7, $cutoff));

	$page = 1;
	while(($json = zkillboard_api(
		"/groupID/{$groupids}/no-attackers/api-only/pastSeconds/{$cutoff}/orderDirection/asc/page/{$page}/"
	)) !== array()) {

		++$page;
	}
}





function zkillboard_api($call) {
	$json = \Osmium\State\get_cache($call, null, 'API_ZKB_');
	$uri = "https://zkillboard.com/api".$call;
	if($json !== null) {
		echo "Requesting {$uri} -\n";
		return $json;
	}

	static $hashes = array();
	static $next_request_time = 0;
	static $retries = [ 0, 10, 15, 30, 60 ];
	global $c;

	echo "Requesting {$uri} ";

	foreach($retries as $ret) {
		sleep($ret);
		usleep(max(1, ($next_request_time - microtime(true)) * 1e6));

		curl_setopt($c, CURLOPT_URL, $uri);
		$reply = curl_exec($c);

		echo ".";
		if($reply === false) {
			continue;
		}

		list($header, $body) = explode("\r\n\r\n", $reply, 2);
		if(preg_match("%^X-Time-Between-Req: (.+)$%m", $header, $match)) {
			$wait = $match[1] + 1;
		} else {
			$wait = 10;
		}

		$next_request_time = microtime(true) + $wait;
		$json = json_decode($body, true);
		if(json_last_error() !== JSON_ERROR_NONE) {
			continue;
		}

		if(!is_array($json) || !isset($json[0]['killID'])) {
			continue;
		}

		$hash = sha1(serialize($json));
		unset($hashes[$call]);
		if(($index = array_search($hash, $hashes, true)) !== false) {
			echo "\n";
			fwrite(STDERR, "Calls {$index} and {$call} returned the same dataset! Giving up.\n");
			die(666);
		}
		$hashes[$call] = $hash;

		\Osmium\State\put_cache($call, $json, 600, 'API_ZKB_');
		echo "\n";
		return $json;
	}

	echo "\n";
	fwrite(STDERR, "Could not request {$uri} after ".count($retries)." attempts, giving up.\n");
	die(1);
}
