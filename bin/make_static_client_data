#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2012, 2013 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

require __DIR__.'/../inc/root.php';

$static = array();

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT typeid, typename, category, subcategory, metagroupid, groupname, other,
	mg0.marketgroupid AS mgid0, mg0.marketgroupname AS mgname0,
	mg1.marketgroupid AS mgid1, mg1.marketgroupname AS mgname1,
	mg2.marketgroupid AS mgid2, mg2.marketgroupname AS mgname2,
	mg3.marketgroupid AS mgid3, mg3.marketgroupname AS mgname3,
	mg4.marketgroupid AS mgid4, mg4.marketgroupname AS mgname4
	FROM osmium.typessearchdata tsd
	LEFT JOIN eve.invmarketgroups mg0 ON mg0.marketgroupid = tsd.marketgroupid
	LEFT JOIN eve.invmarketgroups mg1 ON mg1.marketgroupid = mg0.parentgroupid
	LEFT JOIN eve.invmarketgroups mg2 ON mg2.marketgroupid = mg1.parentgroupid
	LEFT JOIN eve.invmarketgroups mg3 ON mg3.marketgroupid = mg2.parentgroupid
	LEFT JOIN eve.invmarketgroups mg4 ON mg4.marketgroupid = mg3.parentgroupid
	ORDER BY mgname4, mgname3, mgname2, mgname1, mgname0, category, metagroupid, typename'
	);

$flatgroups = array(
	'root' => array('children' => array()),
	'types' => array(),
);

while($row = \Osmium\Db\fetch_assoc($q)) {
	for($i = 1; $i <= 4; ++$i) {
		if($row['mgid'.$i] === null) {
			if(($root = $row['mgid'.($i - 1)]) !== null) {
				if(!in_array($root, $flatgroups['root']['children'])) {
					$flatgroups['root']['children'][] = (int)$root;
				}
			}

			break;
		}

		$parent = (int)$row['mgid'.$i];
		$child = (int)$row['mgid'.($i - 1)];

		if(!isset($flatgroups[$parent])) {
			$flatgroups[$parent] = array(
				'name' => $row['mgname'.$i],
				'children' => array(),
				);
		}

		if(!in_array($child, $flatgroups[$parent]['children'])) {
			$flatgroups[$parent]['children'][] = $child;
		}
	}

	$mgid = $row['mgid0'] === null ? 0 : (int)$row['mgid0'];
	$mgname = $mgid === 0 ? 'Uncategorized types' : $row['mgname0'];

	if(!isset($flatgroups[$mgid])) {
		$flatgroups[$mgid] = array(
			'name' => $mgname,
			'children' => array(),
			);
	}

	$flatgroups[$mgid]['types'][] = (int)$row['typeid'];

	$flatgroups['types'][(int)$row['typeid']] = array(
		(int)$row['typeid'],
		$row['typename'],
		$row['category'],
		$row['subcategory'],
		(int)$row['metagroupid'],
		$row['groupname'],
		$row['other'],
	);
}

$flatgroups['root']['children'][] = 0;

ksort($flatgroups);
$static['groups'] = $flatgroups;

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT moduleid, chargeid FROM osmium.invcharges
	ORDER BY moduleid ASC, chargeid ASC'
	);

while($row = \Osmium\Db\fetch_assoc($q)) {
	$static['charges'][$row['moduleid']][] = (int)$row['chargeid'];
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT metagroupid, metagroupname FROM osmium.invmetagroups
	ORDER BY metagroupname ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['metagroups'][$row[0]] = $row[1];
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT typeid, offlinable, onlinable, activable, overloadable
	FROM osmium.invmodulestates
	ORDER BY typeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['modulestates'][$row[0]] = array(
		(int)($row[1] === 't'),
		(int)($row[2] === 't'),
		(int)($row[3] === 't'),
		(int)($row[4] === 't'),
		);
}

/** CLF state name => [Pretty name, Image name]
 * Order must be consistent with $static['modulestates'] */
$static['modulestatenames'] = array(
    'offline' => array('Offline', 'offline.png'),
    'online' => array('Online', 'online.png'),
    'active' => array('Active', 'active.png'),
    'overloaded' => array('Overloaded', 'overloaded.png'),
);

$static['statefulslottypes'] = \Osmium\Fit\get_stateful_slottypes();

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT typeid, highslots, medslots, lowslots, rigslots, subsystemslots
	FROM osmium.invshipslots
	ORDER BY typeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	$static['shipslots'][$row[0]] = array(
		(int)$row[1],
		(int)$row[2],
		(int)$row[3],
		(int)$row[4],
		(int)$row[5],
		);
}

/* ---------------------------------------------------------- */

$q = \Osmium\Db\query(
	'SELECT DISTINCT chargeid,
	(COALESCE(em.value, 0) + COALESCE(explosive.value, 0)
	+ COALESCE(kinetic.value, 0) + COALESCE(thermal.value, 0)) AS dmg
	FROM osmium.invcharges
	LEFT JOIN eve.dgmtypeattribs em ON em.typeid = chargeid AND em.attributeid = 114
	LEFT JOIN eve.dgmtypeattribs explosive ON explosive.typeid = chargeid AND explosive.attributeid = 116
	LEFT JOIN eve.dgmtypeattribs kinetic ON kinetic.typeid = chargeid AND kinetic.attributeid = 117
	LEFT JOIN eve.dgmtypeattribs thermal ON thermal.typeid = chargeid AND thermal.attributeid = 118
	ORDER BY chargeid ASC'
);

while($row = \Osmium\Db\fetch_row($q)) {
	if($row[1] == 0) continue;
	$static['chargedmg'][$row[0]] = (double)$row[1];
}

/* ---------------------------------------------------------- */

file_put_contents(__DIR__.'/../static/cache/clientdata.json', json_encode($static));
